@UML - 통합 모델링 언어, Unified Model Language
 - 소프트웨어 공학에서 사용되는 표준화된 범용 모델링 언어
 - 소프트웨어 개념을 다이어그램으로 그리기 위해 사용하는 시작적인 표기법

@UML 필요한 이유
 - 시스템 복잡성을 표준적인 표기법으로 모델링하여 단순하게 표현가능
 - 팀 간의 의사소통에 필요
 - 개발한 시스템 구축에 대한 기초 마련

@UML의 종류
 1. 유즈케이스 다이어그램
 2. 클래스 다이어그램
 3. 시퀀스 다이어그램

 4. 액티비티 다이어그램
 5. 콜라보레이션 다이어그램
 6. 상태 다이어그램
 7. 컴포넌트 다이어그램
 8. 배포 다이어그램

@유스케이스
 - 시스템의 기능적인 요구사항을 설명하기 위한 도구
 - Actor와 시스템이 수행하는 활동간의 관계를 표시하고, 시스템의 기능적인 요구사항을 설명하기 위한 도구
 - 시스템이 어떤 서비스 또는 기능을 제공하는지 명세해주는 것으로 타원형으로 표시
 - 유스케이스 이름은 단순명료하게 기술
ex) 게시글 등록, 예금조회, 사용자 인증,...

@시스템의 범위
 - 우리가 개발하고자 하는 시스템을 사각형으로 표시

@액터
 - 액터는 시스템 외부에 존재하며 시스템과 상호작용하는 모든 것
 - 이벤트를 완결하기 위해 시스템과 상호 작용하는 개체
 - 액터가 사람일 경우, 시스템과 상호 작용하는 사용자에 의해 수행되는 역할을 나타냄

@액터의 종류
1. 프라미어리 액터(Primary Actor)
 - 시스템을 사용함으로써 이득을 얻는 엑터
 - 보통 사람을 지칭하고 사람모양으로 표기하며 시스템 왼쪽에 표기

2. 세컨더리 액터(Secondary Actor)
 - 프라이머리 액터가 이득을 얻기 위해 도움을 주는 액터
 - 보통 외부 시스템을 의미, <<actor>>로 표기하며 시스템 오른쪽에 표기 

@관계(Relationship)
 - 액터와 유스케이스, 유스케이스와 유스케이스 사이의 관계를 나타내며, 서로 상호작용한다는 의미

@관계의 종류
1. 연관관계
 - 유스케이스와 액터간의 상호작용을 의미하는 관계
 - 실선 화살표
2. 포함관계
 - 한 유스케이스가 다른 유스케이스의 기능을 포함하는 관계(반드시 해야만 하는 관계)
3. 확장관계
 - 기본 유스케이스에 특정 조건이나 액터의 선택에 따라 발생하는 유스케이스 (선택적으로 할 수있는 관계)
 - 방향이 다른 점선 화살표
4. 일반화관계
 - 유사한 케이스들 또는 액터들을 추상화한 하나의 유스케이스로 그룹핑하여 이해도를 높인 관계

* Web 프로젝트 Front 파트 설계의 4단계
Sketch - 종이와 같은 간단한 필기도구룰 이용해서 페이지별 디자인한 기획 문서
Wireframe - 디지털 도구와 툴을 이용하여 페이지별 기본 구성 요소를 선으로 이용해서 Frame을 구상한 모델
Mockup - 실제 프로젝트에 반영될 디자인 소스를 첨부하여 디자인 요소를 완성시킨 모델
Prototype - 사용자가 interact할 수 있는 요소를 구현한 준완성단계













